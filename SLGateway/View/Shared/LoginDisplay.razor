@using System.Security.Claims
<AuthorizeView>
    <Authorized>
        <span>Hello, @(Name)!</span>
        <form method="post" action="auth/logout">
            <button type="submit" class="nav-link btn btn-link">Log out</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <a href="auth/logout">Register</a>
        <a href="auth/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string Name { get; set; } = "User";

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        var nameClaims = new string[] { "nickname", "name", ClaimTypes.Name, ClaimTypes.GivenName, ClaimTypes.Email, ClaimTypes.NameIdentifier };
        var nameClaim = user.Claims.FirstOrDefault(x => nameClaims.Contains(x.Type) && !string.IsNullOrWhiteSpace(x.Value));
        if (nameClaim is not null)
        {
            Name = nameClaim.Value;
        }

        await base.OnInitializedAsync();
    }
}