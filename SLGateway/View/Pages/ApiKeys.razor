@page "/apikeys"
@using SLGateway.Data
@using System.Security.Claims
@attribute [Authorize]
@inject ILogger<ApiKeys> logger
@inject IApiKeyService apiKeyService
@inject IJSRuntime jsRuntime

<PageTitle>API Keys</PageTitle>

<div class="row">
    <h1>API Keys</h1>

    <p>You may generate or manage your API keys here.</p>

    <p>You must keep your API keys safe, unauthorized use by a third party may damage your application, cause your key to be removed, or cause your account to be suspended.</p>
</div>

<div class="row">
    <div class="col-lg-5">
        @if (LastApiKey is not null)
        {
            <div>
                <h6>Your new API key</h6>
                <div class="input-group">
                    <input id="last_api_key" type="text" class="form-control" readonly value=@LastApiKey @onfocus=@(() => jsRuntime.InvokeVoidAsync("selectElementText", "last_api_key")) />
                    <button class="btn btn-outline-secondary" @onclick="@(() => jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", LastApiKey))">
                        <i class="oi oi-clipboard"></i>
                    </button>
                </div>
                <div class="text-secondary mt-1">
                    Make sure you save this key, it will not be shown again.
                </div>
            </div>
            <hr class="my-4">
        }
        <form onsubmit:preventDefault @onsubmit="() => SubmitForm()">
            <div class="mb-3">
                <h6>Add an API Key</h6>
                <span>Enter the name of your object or application to create a new key.</span>
            </div>
            <fieldset class="mb-3">
                <label for="name" class="form-label fw-bold">Key name</label>
                <div class="col-lg-6">
                    <input id="name" class="form-control" type="text" required maxlength="50" @bind="FormKeyName" />
                </div>
                <div class="text-secondary mt-1">
                    You can specify the project name or purpose for this key.
                </div>
            </fieldset>
            <div class="mb-3">
                <h6>Select scopes</h6>
                <span>These options determine what objects or applications using this API key has access to.</span>
            </div>
            <fieldset class="form-check mb-3">
                <input id="scope_object_all" type="checkbox" class="form-check-input" checked=@FormScopes.Contains(ApiKeyScopes.Object) @onchange="(e) => ToggleFormScope(ApiKeyScopes.Object, !(bool)e.Value)" />
                <label for="scope_object_all" class="form-check-label fw-bold">object</label>
                <div class="text-secondary">
                    Grants access to API methods that registers SLOs and submit SLO events.
                </div>
            </fieldset>
            <fieldset class="form-check mb-3">
                <input id="scope_client_all" type="checkbox" class="form-check-input" checked=@FormScopes.Contains(ApiKeyScopes.Client) @onchange="(e) => ToggleFormScope(ApiKeyScopes.Client, !(bool)e.Value)" />
                <label for="scope_client_all" class="form-check-label fw-bold">client</label>
                <div class="text-secondary">
                    Grants access to API methods that read SLO events and pushes Gateway commands.
                </div>
            </fieldset>
            <button type="submit" class="btn btn-primary align-middle" disabled=@(!FormValid && !IsCreatingApiKey && !IsLoadingApiKeys)>
                Create API key
                <ConditionalGroup When=@IsCreatingApiKey>
                    <div class="d-inline-block spinner-border spinner-border-sm text-light" role="status">
                      <span class="sr-only">Loading...</span>
                    </div>
                </ConditionalGroup>
            </button>
        </form>
    </div>
    <div class="col-lg-7">
        <div class="table-responsive">
            <h6>Active API keys</h6>
            <table class="table align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Key name</th>
                        <th>Scopes</th>
                        <th>Created</th>
                        <th style="width:120px"></th>
                    </tr>
                </thead>
                <tbody>
                    <ConditionalGroup When=@IsLoadingApiKeys>
                        <tr>
                            <td colspan="4" class="text-center text-muted">
                                Retrieving API keys...
                                <div class="d-inline-block spinner-grow spinner-grow-sm" role="status">
                                </div>
                            </td>
                        </tr>
                    </ConditionalGroup>
                    <ConditionalGroup When=@(!IsLoadingApiKeys)>
                        @if (UserApiKeys.Any())
                        {
                            @foreach (var apiKey in UserApiKeys)
                            {
                                <tr>
                                    <td>@apiKey.Name</td>
                                    <td>@(string.Join(", ", apiKey.Scopes))</td>
                                    <td>@apiKey.CreatedUtc</td>
                                    <td>
                                        <button class="btn btn-outline-danger" @onclick="() => RevokeKey(apiKey)" disabled=@(IsRevokingApiKey.Contains(apiKey.Key))>
                                            Revoke
                                            <ConditionalGroup When=@(IsRevokingApiKey.Contains(apiKey.Key))>
                                                <div class="d-inline-block spinner-border spinner-border-sm text-light" role="status">
                                                  <span class="sr-only">Loading...</span>
                                                </div>
                                            </ConditionalGroup>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td class="text-center text-muted" colspan="4">No API keys found.</td>
                            </tr>
                        }
                    </ConditionalGroup>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string UserId { get; set; }

    private IEnumerable<ApiKey> UserApiKeys { get; set; } = new List<ApiKey>();
    
    private string FormKeyName { get; set; } = "";
    private HashSet<string> FormScopes { get; set; } = new HashSet<string>();
    private bool FormValid => !string.IsNullOrWhiteSpace(FormKeyName) && FormScopes.Any() && UserId is not null;

    private string LastApiKey { get; set; } = null;

    // Status indicators
    private bool IsLoadingApiKeys { get; set; } = true;
    private bool IsCreatingApiKey { get; set; }
    private HashSet<string> IsRevokingApiKey { get; set; } = new HashSet<string>();

    private void ResetForm()
    {
        FormKeyName = "";
        FormScopes = new HashSet<string>();
    }

    private async void SubmitForm()
    {
        logger.LogInformation("Api key form submitted with name: {name} and scopes: {scopes} by user: {userId}", FormKeyName, FormScopes, UserId);
        if (UserId is not null) 
        {
            IsCreatingApiKey = true;
            StateHasChanged();

            var trimmedName = FormKeyName.Trim();
            var apiKey = await apiKeyService.Create(trimmedName.Substring(0, Math.Min(50, trimmedName.Length)), UserId, FormScopes.ToList());
            logger.LogTrace("Created apiKey {apiKey}: {key}", apiKey, apiKey.Key);
            
            if (apiKey is not null)
            {
                LastApiKey = apiKey.Key;
                UserApiKeys = await apiKeyService.GetForUser(UserId);

                ResetForm();
            }

            IsCreatingApiKey = false;
            StateHasChanged();
        }
    }

    private async void RevokeKey(ApiKey key)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to revoke this key? This action cannot be undone.");
        if (confirm)
        {
            IsRevokingApiKey.Add(key.Key);
            StateHasChanged();

            if (await apiKeyService.Invalidate(key.Key))
            {
                UserApiKeys = await apiKeyService.GetForUser(UserId);

                if (key.Key == LastApiKey)
                {
                    LastApiKey = null;
                }
            }

            IsRevokingApiKey.Remove(key.Key);
            StateHasChanged();
        }
    }

    private void ToggleFormScope(string scope, bool toState)
    {
        if (toState)
        {
            FormScopes.Remove(scope);
        }
        else
        {
            FormScopes.Add(scope);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        var userId = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier && !string.IsNullOrWhiteSpace(x.Value))?.Value;
        if (userId is not null)
        {
            UserId = userId;

            UserApiKeys = await apiKeyService.GetForUser(userId);
        }

        IsLoadingApiKeys = false;

        await base.OnInitializedAsync();
    }
}
